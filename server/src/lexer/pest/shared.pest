// Copyright (C) 2023 Bryan A. Jones.
//
// This file is part of the CodeChat Editor. The CodeChat Editor is free
// software: you can redistribute it and/or modify it under the terms of the GNU
// General Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// The CodeChat Editor is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// the CodeChat Editor. If not, see
// [http://www.gnu.org/licenses](http://www.gnu.org/licenses).
//
// # `shared.pest` - Pest parser definition shared by all languages
file = { SOI ~ (doc_block | code_block)* ~ EOI }

// ## Inline comments
//
// Use this approach to match a group of inline comments with the same
// whitespace indentation.
inline_comment      =  { inline_comment_init ~ inline_comment_cont* ~ DROP ~ DROP }
inline_comment_init = _{ PUSH(white_space) ~ PUSH(inline_comment_delims) ~ inline_comment_body }
// Match on the same whitespace (second from the top of stack) and then the same
// comment delimiter (at the top of stack) for continued comments.
inline_comment_cont = _{ PEEK[-2..-1] ~ PEEK ~ inline_comment_body }

// ## Block comments
//
// Block comments never combine.
block_comment     = {
    white_space ~ block_comment_opening_delims ~ block_comment_pre ~ contents ~ optional_space ~ block_comment_closing_delim ~ white_space ~ block_comment_ending
}
block_comment_pre = { " " | NEWLINE }
// If there's a space immediately before the block closing delimiter, don't
// capture it, so that this space can be discarded in the `block_comment` token.
contents       = { (!(optional_space ~ block_comment_closing_delim) ~ ANY)* }
optional_space = { " "? }
// Use this so that the ending (usually a newline) gets captured in a token.
block_comment_ending = { newline_eoi }

// ## Code blocks
code_block =  { code_line+ }
code_line  = _{ (!doc_block ~ code_line_token* ~ NEWLINE) | (!doc_block ~ code_line_token+ ~ EOI) }

// ## Other commonly-used tokens
newline_eoi = _{ NEWLINE | EOI }
not_newline = _{ !NEWLINE ~ ANY }
// Indicates this token isn't used by the parser.
unused = { "unused" }

// CodeChat Editor lexer: c_cpp.
