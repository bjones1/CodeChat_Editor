// Copyright (C) 2023 Bryan A. Jones.
//
// This file is part of the CodeChat Editor. The CodeChat Editor is free
// software: you can redistribute it and/or modify it under the terms of the GNU
// General Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// The CodeChat Editor is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// the CodeChat Editor. If not, see
// [http://www.gnu.org/licenses](http://www.gnu.org/licenses).
//
// # `c.pest` - Pest parser definition for the C language
file      =  { SOI ~ (doc_block | code_block)* }
doc_block = _{ inline_comment | block_comment }

// Per the
// [C standard, section 6.4.3](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3220.pdf?page=65),
// "white-space consists of: (space, horizontal tab, new-line, vertical tab, and
// form-feed)." Omit newlines, since the rest of this parser uses these.
vertical_tab = { "\x0B" }
form_feed    = { "\x0C" }
white_space  = { (" " | "\t" | vertical_tab | form_feed)* }

// Use this approach to match a group of inline comments with the same
// whitespace indentation.
inline_comment      =  { inline_comment_init ~ inline_comment_cont* ~ DROP ~ DROP }
inline_comment_init = _{ PUSH(white_space) ~ PUSH(inline_comment_delims) ~ inline_comment_body }
// Match on the same whitespace (1 from the top of stack) and then the same
// comment delimiter
// (at the top of stack) for continued comments. TODO: is this the correct
// syntax for
// 1 from the top of stack? What if more items were on the stack?
inline_comment_cont = _{ PEEK[1..2] ~ PEEK ~ inline_comment_body }
// Other languages support more inline comment delimiters; even if they're not
// used,
// they must be defined here.
inline_comment_delims  = _{ inline_comment_delim_0 }
inline_comment_delim_0 =  { "//" }
inline_comment_delim_1 =  { "unused" }
inline_comment_delim_2 =  { "unused" }
not_newline            = _{ !NEWLINE ~ ANY }
newline_eoi            = _{ NEWLINE | EOI }
// This accepts an inline comment containing a space then some contents, or an
// inline comment
// immediately followed by a newline.
inline_comment_body     = { (" " ~ inline_comment_contents) | newline_eoi }
inline_comment_contents = { not_newline* ~ newline_eoi }

// Block comments never combine.
block_comment = { white_space ~ block_comment_opening_delims ~ block_comment_pre ~ contents ~ "*/" ~ white_space ~ newline_eoi }
// Support multiple opening delimiters for other languages; assume the closing
// delimiter
// is always the same.
block_comment_opening_delims  = _{ block_comment_opening_delim_0 }
block_comment_opening_delim_0 =  { "/*" }
block_comment_opening_delim_1 =  { "unused" }
block_comment_opening_delim_2 =  { "unused" }
block_comment_closing_delim   = _{ "*/" }
block_comment_pre             =  { (" " | newline_eoi) }
// TODO: rewrite for languages that supported nested block comments.
contents = { (!block_comment_closing_delim ~ ANY)* }

code_block = { code_line+ }
// If a lines of code ends with a backslash, it continues on the next line. This
// is a virtual line; treat it as a single line.
virtual_line = _{ ("\\" ~ NEWLINE | not_newline)* }
code_line    = _{ (!doc_block ~ virtual_line ~ NEWLINE) | (!doc_block ~ not_newline+ ~ EOI) }
